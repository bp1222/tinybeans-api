/*
Tinybeans API - Unofficial

Reverse Engineered API for Tinybeans.  This is horribly incomplete, and not supported

API version: 0.1.1
Contact: dave@mudsite.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tinybeans

import (
	"encoding/json"
)

// Avatars struct for Avatars
type Avatars struct {
	L *string `json:"l,omitempty"`
	M *string `json:"m,omitempty"`
	O *string `json:"o,omitempty"`
	S *string `json:"s,omitempty"`
}

// NewAvatars instantiates a new Avatars object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAvatars() *Avatars {
	this := Avatars{}
	return &this
}

// NewAvatarsWithDefaults instantiates a new Avatars object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAvatarsWithDefaults() *Avatars {
	this := Avatars{}
	return &this
}

// GetL returns the L field value if set, zero value otherwise.
func (o *Avatars) GetL() string {
	if o == nil || isNil(o.L) {
		var ret string
		return ret
	}
	return *o.L
}

// GetLOk returns a tuple with the L field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Avatars) GetLOk() (*string, bool) {
	if o == nil || isNil(o.L) {
    return nil, false
	}
	return o.L, true
}

// HasL returns a boolean if a field has been set.
func (o *Avatars) HasL() bool {
	if o != nil && !isNil(o.L) {
		return true
	}

	return false
}

// SetL gets a reference to the given string and assigns it to the L field.
func (o *Avatars) SetL(v string) {
	o.L = &v
}

// GetM returns the M field value if set, zero value otherwise.
func (o *Avatars) GetM() string {
	if o == nil || isNil(o.M) {
		var ret string
		return ret
	}
	return *o.M
}

// GetMOk returns a tuple with the M field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Avatars) GetMOk() (*string, bool) {
	if o == nil || isNil(o.M) {
    return nil, false
	}
	return o.M, true
}

// HasM returns a boolean if a field has been set.
func (o *Avatars) HasM() bool {
	if o != nil && !isNil(o.M) {
		return true
	}

	return false
}

// SetM gets a reference to the given string and assigns it to the M field.
func (o *Avatars) SetM(v string) {
	o.M = &v
}

// GetO returns the O field value if set, zero value otherwise.
func (o *Avatars) GetO() string {
	if o == nil || isNil(o.O) {
		var ret string
		return ret
	}
	return *o.O
}

// GetOOk returns a tuple with the O field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Avatars) GetOOk() (*string, bool) {
	if o == nil || isNil(o.O) {
    return nil, false
	}
	return o.O, true
}

// HasO returns a boolean if a field has been set.
func (o *Avatars) HasO() bool {
	if o != nil && !isNil(o.O) {
		return true
	}

	return false
}

// SetO gets a reference to the given string and assigns it to the O field.
func (o *Avatars) SetO(v string) {
	o.O = &v
}

// GetS returns the S field value if set, zero value otherwise.
func (o *Avatars) GetS() string {
	if o == nil || isNil(o.S) {
		var ret string
		return ret
	}
	return *o.S
}

// GetSOk returns a tuple with the S field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Avatars) GetSOk() (*string, bool) {
	if o == nil || isNil(o.S) {
    return nil, false
	}
	return o.S, true
}

// HasS returns a boolean if a field has been set.
func (o *Avatars) HasS() bool {
	if o != nil && !isNil(o.S) {
		return true
	}

	return false
}

// SetS gets a reference to the given string and assigns it to the S field.
func (o *Avatars) SetS(v string) {
	o.S = &v
}

func (o Avatars) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.L) {
		toSerialize["l"] = o.L
	}
	if !isNil(o.M) {
		toSerialize["m"] = o.M
	}
	if !isNil(o.O) {
		toSerialize["o"] = o.O
	}
	if !isNil(o.S) {
		toSerialize["s"] = o.S
	}
	return json.Marshal(toSerialize)
}

type NullableAvatars struct {
	value *Avatars
	isSet bool
}

func (v NullableAvatars) Get() *Avatars {
	return v.value
}

func (v *NullableAvatars) Set(val *Avatars) {
	v.value = val
	v.isSet = true
}

func (v NullableAvatars) IsSet() bool {
	return v.isSet
}

func (v *NullableAvatars) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvatars(val *Avatars) *NullableAvatars {
	return &NullableAvatars{value: val, isSet: true}
}

func (v NullableAvatars) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvatars) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


