/*
Tinybeans API - Unofficial

Reverse Engineered API for Tinybeans.  This is horribly incomplete, and not supported

API version: 0.0.1
Contact: dave@mudsite.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tinybeans

import (
	"encoding/json"
)

// EmotionType struct for EmotionType
type EmotionType struct {
	Name *string `json:"name,omitempty"`
	Label *string `json:"label,omitempty"`
}

// NewEmotionType instantiates a new EmotionType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmotionType() *EmotionType {
	this := EmotionType{}
	return &this
}

// NewEmotionTypeWithDefaults instantiates a new EmotionType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmotionTypeWithDefaults() *EmotionType {
	this := EmotionType{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EmotionType) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmotionType) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EmotionType) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EmotionType) SetName(v string) {
	o.Name = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *EmotionType) GetLabel() string {
	if o == nil || isNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmotionType) GetLabelOk() (*string, bool) {
	if o == nil || isNil(o.Label) {
    return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *EmotionType) HasLabel() bool {
	if o != nil && !isNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *EmotionType) SetLabel(v string) {
	o.Label = &v
}

func (o EmotionType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	return json.Marshal(toSerialize)
}

type NullableEmotionType struct {
	value *EmotionType
	isSet bool
}

func (v NullableEmotionType) Get() *EmotionType {
	return v.value
}

func (v *NullableEmotionType) Set(val *EmotionType) {
	v.value = val
	v.isSet = true
}

func (v NullableEmotionType) IsSet() bool {
	return v.isSet
}

func (v *NullableEmotionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmotionType(val *EmotionType) *NullableEmotionType {
	return &NullableEmotionType{value: val, isSet: true}
}

func (v NullableEmotionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmotionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


