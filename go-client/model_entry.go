/*
Tinybeans API - Unofficial

Reverse Engineered API for Tinybeans.  This is horribly incomplete, and not supported

API version: 0.1.1
Contact: dave@mudsite.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tinybeans

import (
	"encoding/json"
)

// Entry struct for Entry
type Entry struct {
	URL *string `json:"URL,omitempty"`
	Id *int64 `json:"id,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	PrivateMode *bool `json:"privateMode,omitempty"`
	Uuid *string `json:"uuid,omitempty"`
	ClientRef *string `json:"clientRef,omitempty"`
	Type *string `json:"type,omitempty"`
	Year *int64 `json:"year,omitempty"`
	Month *int64 `json:"month,omitempty"`
	Day *int64 `json:"day,omitempty"`
	Caption *string `json:"caption,omitempty"`
	Timestamp *int64 `json:"timestamp,omitempty"`
	LastUpdatedTimestamp *int64 `json:"lastUpdatedTimestamp,omitempty"`
	Blobs *Blob `json:"blobs,omitempty"`
	JournalId *int64 `json:"journalId,omitempty"`
	UserId *int64 `json:"userId,omitempty"`
	Emotions []Emotion `json:"emotions,omitempty"`
}

// NewEntry instantiates a new Entry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntry() *Entry {
	this := Entry{}
	return &this
}

// NewEntryWithDefaults instantiates a new Entry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntryWithDefaults() *Entry {
	this := Entry{}
	return &this
}

// GetURL returns the URL field value if set, zero value otherwise.
func (o *Entry) GetURL() string {
	if o == nil || isNil(o.URL) {
		var ret string
		return ret
	}
	return *o.URL
}

// GetURLOk returns a tuple with the URL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetURLOk() (*string, bool) {
	if o == nil || isNil(o.URL) {
    return nil, false
	}
	return o.URL, true
}

// HasURL returns a boolean if a field has been set.
func (o *Entry) HasURL() bool {
	if o != nil && !isNil(o.URL) {
		return true
	}

	return false
}

// SetURL gets a reference to the given string and assigns it to the URL field.
func (o *Entry) SetURL(v string) {
	o.URL = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Entry) GetId() int64 {
	if o == nil || isNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetIdOk() (*int64, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Entry) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Entry) SetId(v int64) {
	o.Id = &v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *Entry) GetDeleted() bool {
	if o == nil || isNil(o.Deleted) {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetDeletedOk() (*bool, bool) {
	if o == nil || isNil(o.Deleted) {
    return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *Entry) HasDeleted() bool {
	if o != nil && !isNil(o.Deleted) {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *Entry) SetDeleted(v bool) {
	o.Deleted = &v
}

// GetPrivateMode returns the PrivateMode field value if set, zero value otherwise.
func (o *Entry) GetPrivateMode() bool {
	if o == nil || isNil(o.PrivateMode) {
		var ret bool
		return ret
	}
	return *o.PrivateMode
}

// GetPrivateModeOk returns a tuple with the PrivateMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetPrivateModeOk() (*bool, bool) {
	if o == nil || isNil(o.PrivateMode) {
    return nil, false
	}
	return o.PrivateMode, true
}

// HasPrivateMode returns a boolean if a field has been set.
func (o *Entry) HasPrivateMode() bool {
	if o != nil && !isNil(o.PrivateMode) {
		return true
	}

	return false
}

// SetPrivateMode gets a reference to the given bool and assigns it to the PrivateMode field.
func (o *Entry) SetPrivateMode(v bool) {
	o.PrivateMode = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *Entry) GetUuid() string {
	if o == nil || isNil(o.Uuid) {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetUuidOk() (*string, bool) {
	if o == nil || isNil(o.Uuid) {
    return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *Entry) HasUuid() bool {
	if o != nil && !isNil(o.Uuid) {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *Entry) SetUuid(v string) {
	o.Uuid = &v
}

// GetClientRef returns the ClientRef field value if set, zero value otherwise.
func (o *Entry) GetClientRef() string {
	if o == nil || isNil(o.ClientRef) {
		var ret string
		return ret
	}
	return *o.ClientRef
}

// GetClientRefOk returns a tuple with the ClientRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetClientRefOk() (*string, bool) {
	if o == nil || isNil(o.ClientRef) {
    return nil, false
	}
	return o.ClientRef, true
}

// HasClientRef returns a boolean if a field has been set.
func (o *Entry) HasClientRef() bool {
	if o != nil && !isNil(o.ClientRef) {
		return true
	}

	return false
}

// SetClientRef gets a reference to the given string and assigns it to the ClientRef field.
func (o *Entry) SetClientRef(v string) {
	o.ClientRef = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Entry) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Entry) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Entry) SetType(v string) {
	o.Type = &v
}

// GetYear returns the Year field value if set, zero value otherwise.
func (o *Entry) GetYear() int64 {
	if o == nil || isNil(o.Year) {
		var ret int64
		return ret
	}
	return *o.Year
}

// GetYearOk returns a tuple with the Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetYearOk() (*int64, bool) {
	if o == nil || isNil(o.Year) {
    return nil, false
	}
	return o.Year, true
}

// HasYear returns a boolean if a field has been set.
func (o *Entry) HasYear() bool {
	if o != nil && !isNil(o.Year) {
		return true
	}

	return false
}

// SetYear gets a reference to the given int64 and assigns it to the Year field.
func (o *Entry) SetYear(v int64) {
	o.Year = &v
}

// GetMonth returns the Month field value if set, zero value otherwise.
func (o *Entry) GetMonth() int64 {
	if o == nil || isNil(o.Month) {
		var ret int64
		return ret
	}
	return *o.Month
}

// GetMonthOk returns a tuple with the Month field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetMonthOk() (*int64, bool) {
	if o == nil || isNil(o.Month) {
    return nil, false
	}
	return o.Month, true
}

// HasMonth returns a boolean if a field has been set.
func (o *Entry) HasMonth() bool {
	if o != nil && !isNil(o.Month) {
		return true
	}

	return false
}

// SetMonth gets a reference to the given int64 and assigns it to the Month field.
func (o *Entry) SetMonth(v int64) {
	o.Month = &v
}

// GetDay returns the Day field value if set, zero value otherwise.
func (o *Entry) GetDay() int64 {
	if o == nil || isNil(o.Day) {
		var ret int64
		return ret
	}
	return *o.Day
}

// GetDayOk returns a tuple with the Day field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetDayOk() (*int64, bool) {
	if o == nil || isNil(o.Day) {
    return nil, false
	}
	return o.Day, true
}

// HasDay returns a boolean if a field has been set.
func (o *Entry) HasDay() bool {
	if o != nil && !isNil(o.Day) {
		return true
	}

	return false
}

// SetDay gets a reference to the given int64 and assigns it to the Day field.
func (o *Entry) SetDay(v int64) {
	o.Day = &v
}

// GetCaption returns the Caption field value if set, zero value otherwise.
func (o *Entry) GetCaption() string {
	if o == nil || isNil(o.Caption) {
		var ret string
		return ret
	}
	return *o.Caption
}

// GetCaptionOk returns a tuple with the Caption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetCaptionOk() (*string, bool) {
	if o == nil || isNil(o.Caption) {
    return nil, false
	}
	return o.Caption, true
}

// HasCaption returns a boolean if a field has been set.
func (o *Entry) HasCaption() bool {
	if o != nil && !isNil(o.Caption) {
		return true
	}

	return false
}

// SetCaption gets a reference to the given string and assigns it to the Caption field.
func (o *Entry) SetCaption(v string) {
	o.Caption = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *Entry) GetTimestamp() int64 {
	if o == nil || isNil(o.Timestamp) {
		var ret int64
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetTimestampOk() (*int64, bool) {
	if o == nil || isNil(o.Timestamp) {
    return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *Entry) HasTimestamp() bool {
	if o != nil && !isNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int64 and assigns it to the Timestamp field.
func (o *Entry) SetTimestamp(v int64) {
	o.Timestamp = &v
}

// GetLastUpdatedTimestamp returns the LastUpdatedTimestamp field value if set, zero value otherwise.
func (o *Entry) GetLastUpdatedTimestamp() int64 {
	if o == nil || isNil(o.LastUpdatedTimestamp) {
		var ret int64
		return ret
	}
	return *o.LastUpdatedTimestamp
}

// GetLastUpdatedTimestampOk returns a tuple with the LastUpdatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetLastUpdatedTimestampOk() (*int64, bool) {
	if o == nil || isNil(o.LastUpdatedTimestamp) {
    return nil, false
	}
	return o.LastUpdatedTimestamp, true
}

// HasLastUpdatedTimestamp returns a boolean if a field has been set.
func (o *Entry) HasLastUpdatedTimestamp() bool {
	if o != nil && !isNil(o.LastUpdatedTimestamp) {
		return true
	}

	return false
}

// SetLastUpdatedTimestamp gets a reference to the given int64 and assigns it to the LastUpdatedTimestamp field.
func (o *Entry) SetLastUpdatedTimestamp(v int64) {
	o.LastUpdatedTimestamp = &v
}

// GetBlobs returns the Blobs field value if set, zero value otherwise.
func (o *Entry) GetBlobs() Blob {
	if o == nil || isNil(o.Blobs) {
		var ret Blob
		return ret
	}
	return *o.Blobs
}

// GetBlobsOk returns a tuple with the Blobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetBlobsOk() (*Blob, bool) {
	if o == nil || isNil(o.Blobs) {
    return nil, false
	}
	return o.Blobs, true
}

// HasBlobs returns a boolean if a field has been set.
func (o *Entry) HasBlobs() bool {
	if o != nil && !isNil(o.Blobs) {
		return true
	}

	return false
}

// SetBlobs gets a reference to the given Blob and assigns it to the Blobs field.
func (o *Entry) SetBlobs(v Blob) {
	o.Blobs = &v
}

// GetJournalId returns the JournalId field value if set, zero value otherwise.
func (o *Entry) GetJournalId() int64 {
	if o == nil || isNil(o.JournalId) {
		var ret int64
		return ret
	}
	return *o.JournalId
}

// GetJournalIdOk returns a tuple with the JournalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetJournalIdOk() (*int64, bool) {
	if o == nil || isNil(o.JournalId) {
    return nil, false
	}
	return o.JournalId, true
}

// HasJournalId returns a boolean if a field has been set.
func (o *Entry) HasJournalId() bool {
	if o != nil && !isNil(o.JournalId) {
		return true
	}

	return false
}

// SetJournalId gets a reference to the given int64 and assigns it to the JournalId field.
func (o *Entry) SetJournalId(v int64) {
	o.JournalId = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *Entry) GetUserId() int64 {
	if o == nil || isNil(o.UserId) {
		var ret int64
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetUserIdOk() (*int64, bool) {
	if o == nil || isNil(o.UserId) {
    return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *Entry) HasUserId() bool {
	if o != nil && !isNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int64 and assigns it to the UserId field.
func (o *Entry) SetUserId(v int64) {
	o.UserId = &v
}

// GetEmotions returns the Emotions field value if set, zero value otherwise.
func (o *Entry) GetEmotions() []Emotion {
	if o == nil || isNil(o.Emotions) {
		var ret []Emotion
		return ret
	}
	return o.Emotions
}

// GetEmotionsOk returns a tuple with the Emotions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetEmotionsOk() ([]Emotion, bool) {
	if o == nil || isNil(o.Emotions) {
    return nil, false
	}
	return o.Emotions, true
}

// HasEmotions returns a boolean if a field has been set.
func (o *Entry) HasEmotions() bool {
	if o != nil && !isNil(o.Emotions) {
		return true
	}

	return false
}

// SetEmotions gets a reference to the given []Emotion and assigns it to the Emotions field.
func (o *Entry) SetEmotions(v []Emotion) {
	o.Emotions = v
}

func (o Entry) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.URL) {
		toSerialize["URL"] = o.URL
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Deleted) {
		toSerialize["deleted"] = o.Deleted
	}
	if !isNil(o.PrivateMode) {
		toSerialize["privateMode"] = o.PrivateMode
	}
	if !isNil(o.Uuid) {
		toSerialize["uuid"] = o.Uuid
	}
	if !isNil(o.ClientRef) {
		toSerialize["clientRef"] = o.ClientRef
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.Year) {
		toSerialize["year"] = o.Year
	}
	if !isNil(o.Month) {
		toSerialize["month"] = o.Month
	}
	if !isNil(o.Day) {
		toSerialize["day"] = o.Day
	}
	if !isNil(o.Caption) {
		toSerialize["caption"] = o.Caption
	}
	if !isNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !isNil(o.LastUpdatedTimestamp) {
		toSerialize["lastUpdatedTimestamp"] = o.LastUpdatedTimestamp
	}
	if !isNil(o.Blobs) {
		toSerialize["blobs"] = o.Blobs
	}
	if !isNil(o.JournalId) {
		toSerialize["journalId"] = o.JournalId
	}
	if !isNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	if !isNil(o.Emotions) {
		toSerialize["emotions"] = o.Emotions
	}
	return json.Marshal(toSerialize)
}

type NullableEntry struct {
	value *Entry
	isSet bool
}

func (v NullableEntry) Get() *Entry {
	return v.value
}

func (v *NullableEntry) Set(val *Entry) {
	v.value = val
	v.isSet = true
}

func (v NullableEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntry(val *Entry) *NullableEntry {
	return &NullableEntry{value: val, isSet: true}
}

func (v NullableEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


