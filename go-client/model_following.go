/*
Tinybeans API - Unofficial

Reverse Engineered API for Tinybeans.  This is horribly incomplete, and not supported

API version: 0.1.1
Contact: dave@mudsite.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tinybeans

import (
	"encoding/json"
)

// Following struct for Following
type Following struct {
	URL *string `json:"URL,omitempty"`
	Id *int64 `json:"id,omitempty"`
	ViewEntries *bool `json:"viewEntries,omitempty"`
	AddEntries *bool `json:"addEntries,omitempty"`
	ViewMilestones *bool `json:"viewMilestones,omitempty"`
	EditMilestones *bool `json:"editMilestones,omitempty"`
	CoOwner *bool `json:"coOwner,omitempty"`
	SortOrder *int64 `json:"sortOrder,omitempty"`
	SendFlashback *bool `json:"sendFlashback,omitempty"`
	Relationship *Relationship `json:"relationship,omitempty"`
	EmailFrequencyOnNewEvent *EmailFrequency `json:"emailFrequencyOnNewEvent,omitempty"`
	Timestamp *int64 `json:"timestamp,omitempty"`
	JournalId *int64 `json:"journalId,omitempty"`
	Journal *Journal `json:"journal,omitempty"`
	User *User `json:"user,omitempty"`
}

// NewFollowing instantiates a new Following object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFollowing() *Following {
	this := Following{}
	return &this
}

// NewFollowingWithDefaults instantiates a new Following object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFollowingWithDefaults() *Following {
	this := Following{}
	return &this
}

// GetURL returns the URL field value if set, zero value otherwise.
func (o *Following) GetURL() string {
	if o == nil || isNil(o.URL) {
		var ret string
		return ret
	}
	return *o.URL
}

// GetURLOk returns a tuple with the URL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Following) GetURLOk() (*string, bool) {
	if o == nil || isNil(o.URL) {
    return nil, false
	}
	return o.URL, true
}

// HasURL returns a boolean if a field has been set.
func (o *Following) HasURL() bool {
	if o != nil && !isNil(o.URL) {
		return true
	}

	return false
}

// SetURL gets a reference to the given string and assigns it to the URL field.
func (o *Following) SetURL(v string) {
	o.URL = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Following) GetId() int64 {
	if o == nil || isNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Following) GetIdOk() (*int64, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Following) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Following) SetId(v int64) {
	o.Id = &v
}

// GetViewEntries returns the ViewEntries field value if set, zero value otherwise.
func (o *Following) GetViewEntries() bool {
	if o == nil || isNil(o.ViewEntries) {
		var ret bool
		return ret
	}
	return *o.ViewEntries
}

// GetViewEntriesOk returns a tuple with the ViewEntries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Following) GetViewEntriesOk() (*bool, bool) {
	if o == nil || isNil(o.ViewEntries) {
    return nil, false
	}
	return o.ViewEntries, true
}

// HasViewEntries returns a boolean if a field has been set.
func (o *Following) HasViewEntries() bool {
	if o != nil && !isNil(o.ViewEntries) {
		return true
	}

	return false
}

// SetViewEntries gets a reference to the given bool and assigns it to the ViewEntries field.
func (o *Following) SetViewEntries(v bool) {
	o.ViewEntries = &v
}

// GetAddEntries returns the AddEntries field value if set, zero value otherwise.
func (o *Following) GetAddEntries() bool {
	if o == nil || isNil(o.AddEntries) {
		var ret bool
		return ret
	}
	return *o.AddEntries
}

// GetAddEntriesOk returns a tuple with the AddEntries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Following) GetAddEntriesOk() (*bool, bool) {
	if o == nil || isNil(o.AddEntries) {
    return nil, false
	}
	return o.AddEntries, true
}

// HasAddEntries returns a boolean if a field has been set.
func (o *Following) HasAddEntries() bool {
	if o != nil && !isNil(o.AddEntries) {
		return true
	}

	return false
}

// SetAddEntries gets a reference to the given bool and assigns it to the AddEntries field.
func (o *Following) SetAddEntries(v bool) {
	o.AddEntries = &v
}

// GetViewMilestones returns the ViewMilestones field value if set, zero value otherwise.
func (o *Following) GetViewMilestones() bool {
	if o == nil || isNil(o.ViewMilestones) {
		var ret bool
		return ret
	}
	return *o.ViewMilestones
}

// GetViewMilestonesOk returns a tuple with the ViewMilestones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Following) GetViewMilestonesOk() (*bool, bool) {
	if o == nil || isNil(o.ViewMilestones) {
    return nil, false
	}
	return o.ViewMilestones, true
}

// HasViewMilestones returns a boolean if a field has been set.
func (o *Following) HasViewMilestones() bool {
	if o != nil && !isNil(o.ViewMilestones) {
		return true
	}

	return false
}

// SetViewMilestones gets a reference to the given bool and assigns it to the ViewMilestones field.
func (o *Following) SetViewMilestones(v bool) {
	o.ViewMilestones = &v
}

// GetEditMilestones returns the EditMilestones field value if set, zero value otherwise.
func (o *Following) GetEditMilestones() bool {
	if o == nil || isNil(o.EditMilestones) {
		var ret bool
		return ret
	}
	return *o.EditMilestones
}

// GetEditMilestonesOk returns a tuple with the EditMilestones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Following) GetEditMilestonesOk() (*bool, bool) {
	if o == nil || isNil(o.EditMilestones) {
    return nil, false
	}
	return o.EditMilestones, true
}

// HasEditMilestones returns a boolean if a field has been set.
func (o *Following) HasEditMilestones() bool {
	if o != nil && !isNil(o.EditMilestones) {
		return true
	}

	return false
}

// SetEditMilestones gets a reference to the given bool and assigns it to the EditMilestones field.
func (o *Following) SetEditMilestones(v bool) {
	o.EditMilestones = &v
}

// GetCoOwner returns the CoOwner field value if set, zero value otherwise.
func (o *Following) GetCoOwner() bool {
	if o == nil || isNil(o.CoOwner) {
		var ret bool
		return ret
	}
	return *o.CoOwner
}

// GetCoOwnerOk returns a tuple with the CoOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Following) GetCoOwnerOk() (*bool, bool) {
	if o == nil || isNil(o.CoOwner) {
    return nil, false
	}
	return o.CoOwner, true
}

// HasCoOwner returns a boolean if a field has been set.
func (o *Following) HasCoOwner() bool {
	if o != nil && !isNil(o.CoOwner) {
		return true
	}

	return false
}

// SetCoOwner gets a reference to the given bool and assigns it to the CoOwner field.
func (o *Following) SetCoOwner(v bool) {
	o.CoOwner = &v
}

// GetSortOrder returns the SortOrder field value if set, zero value otherwise.
func (o *Following) GetSortOrder() int64 {
	if o == nil || isNil(o.SortOrder) {
		var ret int64
		return ret
	}
	return *o.SortOrder
}

// GetSortOrderOk returns a tuple with the SortOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Following) GetSortOrderOk() (*int64, bool) {
	if o == nil || isNil(o.SortOrder) {
    return nil, false
	}
	return o.SortOrder, true
}

// HasSortOrder returns a boolean if a field has been set.
func (o *Following) HasSortOrder() bool {
	if o != nil && !isNil(o.SortOrder) {
		return true
	}

	return false
}

// SetSortOrder gets a reference to the given int64 and assigns it to the SortOrder field.
func (o *Following) SetSortOrder(v int64) {
	o.SortOrder = &v
}

// GetSendFlashback returns the SendFlashback field value if set, zero value otherwise.
func (o *Following) GetSendFlashback() bool {
	if o == nil || isNil(o.SendFlashback) {
		var ret bool
		return ret
	}
	return *o.SendFlashback
}

// GetSendFlashbackOk returns a tuple with the SendFlashback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Following) GetSendFlashbackOk() (*bool, bool) {
	if o == nil || isNil(o.SendFlashback) {
    return nil, false
	}
	return o.SendFlashback, true
}

// HasSendFlashback returns a boolean if a field has been set.
func (o *Following) HasSendFlashback() bool {
	if o != nil && !isNil(o.SendFlashback) {
		return true
	}

	return false
}

// SetSendFlashback gets a reference to the given bool and assigns it to the SendFlashback field.
func (o *Following) SetSendFlashback(v bool) {
	o.SendFlashback = &v
}

// GetRelationship returns the Relationship field value if set, zero value otherwise.
func (o *Following) GetRelationship() Relationship {
	if o == nil || isNil(o.Relationship) {
		var ret Relationship
		return ret
	}
	return *o.Relationship
}

// GetRelationshipOk returns a tuple with the Relationship field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Following) GetRelationshipOk() (*Relationship, bool) {
	if o == nil || isNil(o.Relationship) {
    return nil, false
	}
	return o.Relationship, true
}

// HasRelationship returns a boolean if a field has been set.
func (o *Following) HasRelationship() bool {
	if o != nil && !isNil(o.Relationship) {
		return true
	}

	return false
}

// SetRelationship gets a reference to the given Relationship and assigns it to the Relationship field.
func (o *Following) SetRelationship(v Relationship) {
	o.Relationship = &v
}

// GetEmailFrequencyOnNewEvent returns the EmailFrequencyOnNewEvent field value if set, zero value otherwise.
func (o *Following) GetEmailFrequencyOnNewEvent() EmailFrequency {
	if o == nil || isNil(o.EmailFrequencyOnNewEvent) {
		var ret EmailFrequency
		return ret
	}
	return *o.EmailFrequencyOnNewEvent
}

// GetEmailFrequencyOnNewEventOk returns a tuple with the EmailFrequencyOnNewEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Following) GetEmailFrequencyOnNewEventOk() (*EmailFrequency, bool) {
	if o == nil || isNil(o.EmailFrequencyOnNewEvent) {
    return nil, false
	}
	return o.EmailFrequencyOnNewEvent, true
}

// HasEmailFrequencyOnNewEvent returns a boolean if a field has been set.
func (o *Following) HasEmailFrequencyOnNewEvent() bool {
	if o != nil && !isNil(o.EmailFrequencyOnNewEvent) {
		return true
	}

	return false
}

// SetEmailFrequencyOnNewEvent gets a reference to the given EmailFrequency and assigns it to the EmailFrequencyOnNewEvent field.
func (o *Following) SetEmailFrequencyOnNewEvent(v EmailFrequency) {
	o.EmailFrequencyOnNewEvent = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *Following) GetTimestamp() int64 {
	if o == nil || isNil(o.Timestamp) {
		var ret int64
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Following) GetTimestampOk() (*int64, bool) {
	if o == nil || isNil(o.Timestamp) {
    return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *Following) HasTimestamp() bool {
	if o != nil && !isNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int64 and assigns it to the Timestamp field.
func (o *Following) SetTimestamp(v int64) {
	o.Timestamp = &v
}

// GetJournalId returns the JournalId field value if set, zero value otherwise.
func (o *Following) GetJournalId() int64 {
	if o == nil || isNil(o.JournalId) {
		var ret int64
		return ret
	}
	return *o.JournalId
}

// GetJournalIdOk returns a tuple with the JournalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Following) GetJournalIdOk() (*int64, bool) {
	if o == nil || isNil(o.JournalId) {
    return nil, false
	}
	return o.JournalId, true
}

// HasJournalId returns a boolean if a field has been set.
func (o *Following) HasJournalId() bool {
	if o != nil && !isNil(o.JournalId) {
		return true
	}

	return false
}

// SetJournalId gets a reference to the given int64 and assigns it to the JournalId field.
func (o *Following) SetJournalId(v int64) {
	o.JournalId = &v
}

// GetJournal returns the Journal field value if set, zero value otherwise.
func (o *Following) GetJournal() Journal {
	if o == nil || isNil(o.Journal) {
		var ret Journal
		return ret
	}
	return *o.Journal
}

// GetJournalOk returns a tuple with the Journal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Following) GetJournalOk() (*Journal, bool) {
	if o == nil || isNil(o.Journal) {
    return nil, false
	}
	return o.Journal, true
}

// HasJournal returns a boolean if a field has been set.
func (o *Following) HasJournal() bool {
	if o != nil && !isNil(o.Journal) {
		return true
	}

	return false
}

// SetJournal gets a reference to the given Journal and assigns it to the Journal field.
func (o *Following) SetJournal(v Journal) {
	o.Journal = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *Following) GetUser() User {
	if o == nil || isNil(o.User) {
		var ret User
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Following) GetUserOk() (*User, bool) {
	if o == nil || isNil(o.User) {
    return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *Following) HasUser() bool {
	if o != nil && !isNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given User and assigns it to the User field.
func (o *Following) SetUser(v User) {
	o.User = &v
}

func (o Following) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.URL) {
		toSerialize["URL"] = o.URL
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.ViewEntries) {
		toSerialize["viewEntries"] = o.ViewEntries
	}
	if !isNil(o.AddEntries) {
		toSerialize["addEntries"] = o.AddEntries
	}
	if !isNil(o.ViewMilestones) {
		toSerialize["viewMilestones"] = o.ViewMilestones
	}
	if !isNil(o.EditMilestones) {
		toSerialize["editMilestones"] = o.EditMilestones
	}
	if !isNil(o.CoOwner) {
		toSerialize["coOwner"] = o.CoOwner
	}
	if !isNil(o.SortOrder) {
		toSerialize["sortOrder"] = o.SortOrder
	}
	if !isNil(o.SendFlashback) {
		toSerialize["sendFlashback"] = o.SendFlashback
	}
	if !isNil(o.Relationship) {
		toSerialize["relationship"] = o.Relationship
	}
	if !isNil(o.EmailFrequencyOnNewEvent) {
		toSerialize["emailFrequencyOnNewEvent"] = o.EmailFrequencyOnNewEvent
	}
	if !isNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !isNil(o.JournalId) {
		toSerialize["journalId"] = o.JournalId
	}
	if !isNil(o.Journal) {
		toSerialize["journal"] = o.Journal
	}
	if !isNil(o.User) {
		toSerialize["user"] = o.User
	}
	return json.Marshal(toSerialize)
}

type NullableFollowing struct {
	value *Following
	isSet bool
}

func (v NullableFollowing) Get() *Following {
	return v.value
}

func (v *NullableFollowing) Set(val *Following) {
	v.value = val
	v.isSet = true
}

func (v NullableFollowing) IsSet() bool {
	return v.isSet
}

func (v *NullableFollowing) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFollowing(val *Following) *NullableFollowing {
	return &NullableFollowing{value: val, isSet: true}
}

func (v NullableFollowing) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFollowing) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


