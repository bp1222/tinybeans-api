/*
Tinybeans API - Unofficial

Reverse Engineered API for Tinybeans.  This is horribly incomplete, and not supported

API version: 0.1.1
Contact: dave@mudsite.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tinybeans

import (
	"encoding/json"
)

// Journals struct for Journals
type Journals struct {
	Journals []Journal `json:"journals,omitempty"`
	Status *string `json:"status,omitempty"`
}

// NewJournals instantiates a new Journals object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJournals() *Journals {
	this := Journals{}
	return &this
}

// NewJournalsWithDefaults instantiates a new Journals object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJournalsWithDefaults() *Journals {
	this := Journals{}
	return &this
}

// GetJournals returns the Journals field value if set, zero value otherwise.
func (o *Journals) GetJournals() []Journal {
	if o == nil || isNil(o.Journals) {
		var ret []Journal
		return ret
	}
	return o.Journals
}

// GetJournalsOk returns a tuple with the Journals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Journals) GetJournalsOk() ([]Journal, bool) {
	if o == nil || isNil(o.Journals) {
    return nil, false
	}
	return o.Journals, true
}

// HasJournals returns a boolean if a field has been set.
func (o *Journals) HasJournals() bool {
	if o != nil && !isNil(o.Journals) {
		return true
	}

	return false
}

// SetJournals gets a reference to the given []Journal and assigns it to the Journals field.
func (o *Journals) SetJournals(v []Journal) {
	o.Journals = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Journals) GetStatus() string {
	if o == nil || isNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Journals) GetStatusOk() (*string, bool) {
	if o == nil || isNil(o.Status) {
    return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Journals) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Journals) SetStatus(v string) {
	o.Status = &v
}

func (o Journals) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Journals) {
		toSerialize["journals"] = o.Journals
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableJournals struct {
	value *Journals
	isSet bool
}

func (v NullableJournals) Get() *Journals {
	return v.value
}

func (v *NullableJournals) Set(val *Journals) {
	v.value = val
	v.isSet = true
}

func (v NullableJournals) IsSet() bool {
	return v.isSet
}

func (v *NullableJournals) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJournals(val *Journals) *NullableJournals {
	return &NullableJournals{value: val, isSet: true}
}

func (v NullableJournals) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJournals) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


