/*
Tinybeans API - Unofficial

Reverse Engineered API for Tinybeans.  This is horribly incomplete, and not supported

API version: 0.0.1
Contact: dave@mudsite.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tinybeans

import (
	"encoding/json"
)

// UsersMe struct for UsersMe
type UsersMe struct {
	Status *string `json:"status,omitempty"`
	User *User `json:"user,omitempty"`
}

// NewUsersMe instantiates a new UsersMe object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsersMe() *UsersMe {
	this := UsersMe{}
	return &this
}

// NewUsersMeWithDefaults instantiates a new UsersMe object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsersMeWithDefaults() *UsersMe {
	this := UsersMe{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *UsersMe) GetStatus() string {
	if o == nil || isNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersMe) GetStatusOk() (*string, bool) {
	if o == nil || isNil(o.Status) {
    return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *UsersMe) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *UsersMe) SetStatus(v string) {
	o.Status = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *UsersMe) GetUser() User {
	if o == nil || isNil(o.User) {
		var ret User
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersMe) GetUserOk() (*User, bool) {
	if o == nil || isNil(o.User) {
    return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *UsersMe) HasUser() bool {
	if o != nil && !isNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given User and assigns it to the User field.
func (o *UsersMe) SetUser(v User) {
	o.User = &v
}

func (o UsersMe) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !isNil(o.User) {
		toSerialize["user"] = o.User
	}
	return json.Marshal(toSerialize)
}

type NullableUsersMe struct {
	value *UsersMe
	isSet bool
}

func (v NullableUsersMe) Get() *UsersMe {
	return v.value
}

func (v *NullableUsersMe) Set(val *UsersMe) {
	v.value = val
	v.isSet = true
}

func (v NullableUsersMe) IsSet() bool {
	return v.isSet
}

func (v *NullableUsersMe) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsersMe(val *UsersMe) *NullableUsersMe {
	return &NullableUsersMe{value: val, isSet: true}
}

func (v NullableUsersMe) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsersMe) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


