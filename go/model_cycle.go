/*
Tinybeans API - Unofficial

Reverse Engineered API for Tinybeans.  This is horribly incomplete, and not supported

API version: 0.0.1
Contact: dave@mudsite.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tinybeans

import (
	"encoding/json"
)

// Cycle struct for Cycle
type Cycle struct {
	DisplayName *string `json:"displayName,omitempty"`
	CalendarInt *float32 `json:"calendarInt,omitempty"`
	ReminderInDays *float32 `json:"reminderInDays,omitempty"`
	GracePeriodInDays *float32 `json:"gracePeriodInDays,omitempty"`
}

// NewCycle instantiates a new Cycle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCycle() *Cycle {
	this := Cycle{}
	return &this
}

// NewCycleWithDefaults instantiates a new Cycle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCycleWithDefaults() *Cycle {
	this := Cycle{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *Cycle) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cycle) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *Cycle) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *Cycle) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetCalendarInt returns the CalendarInt field value if set, zero value otherwise.
func (o *Cycle) GetCalendarInt() float32 {
	if o == nil || o.CalendarInt == nil {
		var ret float32
		return ret
	}
	return *o.CalendarInt
}

// GetCalendarIntOk returns a tuple with the CalendarInt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cycle) GetCalendarIntOk() (*float32, bool) {
	if o == nil || o.CalendarInt == nil {
		return nil, false
	}
	return o.CalendarInt, true
}

// HasCalendarInt returns a boolean if a field has been set.
func (o *Cycle) HasCalendarInt() bool {
	if o != nil && o.CalendarInt != nil {
		return true
	}

	return false
}

// SetCalendarInt gets a reference to the given float32 and assigns it to the CalendarInt field.
func (o *Cycle) SetCalendarInt(v float32) {
	o.CalendarInt = &v
}

// GetReminderInDays returns the ReminderInDays field value if set, zero value otherwise.
func (o *Cycle) GetReminderInDays() float32 {
	if o == nil || o.ReminderInDays == nil {
		var ret float32
		return ret
	}
	return *o.ReminderInDays
}

// GetReminderInDaysOk returns a tuple with the ReminderInDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cycle) GetReminderInDaysOk() (*float32, bool) {
	if o == nil || o.ReminderInDays == nil {
		return nil, false
	}
	return o.ReminderInDays, true
}

// HasReminderInDays returns a boolean if a field has been set.
func (o *Cycle) HasReminderInDays() bool {
	if o != nil && o.ReminderInDays != nil {
		return true
	}

	return false
}

// SetReminderInDays gets a reference to the given float32 and assigns it to the ReminderInDays field.
func (o *Cycle) SetReminderInDays(v float32) {
	o.ReminderInDays = &v
}

// GetGracePeriodInDays returns the GracePeriodInDays field value if set, zero value otherwise.
func (o *Cycle) GetGracePeriodInDays() float32 {
	if o == nil || o.GracePeriodInDays == nil {
		var ret float32
		return ret
	}
	return *o.GracePeriodInDays
}

// GetGracePeriodInDaysOk returns a tuple with the GracePeriodInDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cycle) GetGracePeriodInDaysOk() (*float32, bool) {
	if o == nil || o.GracePeriodInDays == nil {
		return nil, false
	}
	return o.GracePeriodInDays, true
}

// HasGracePeriodInDays returns a boolean if a field has been set.
func (o *Cycle) HasGracePeriodInDays() bool {
	if o != nil && o.GracePeriodInDays != nil {
		return true
	}

	return false
}

// SetGracePeriodInDays gets a reference to the given float32 and assigns it to the GracePeriodInDays field.
func (o *Cycle) SetGracePeriodInDays(v float32) {
	o.GracePeriodInDays = &v
}

func (o Cycle) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.CalendarInt != nil {
		toSerialize["calendarInt"] = o.CalendarInt
	}
	if o.ReminderInDays != nil {
		toSerialize["reminderInDays"] = o.ReminderInDays
	}
	if o.GracePeriodInDays != nil {
		toSerialize["gracePeriodInDays"] = o.GracePeriodInDays
	}
	return json.Marshal(toSerialize)
}

type NullableCycle struct {
	value *Cycle
	isSet bool
}

func (v NullableCycle) Get() *Cycle {
	return v.value
}

func (v *NullableCycle) Set(val *Cycle) {
	v.value = val
	v.isSet = true
}

func (v NullableCycle) IsSet() bool {
	return v.isSet
}

func (v *NullableCycle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCycle(val *Cycle) *NullableCycle {
	return &NullableCycle{value: val, isSet: true}
}

func (v NullableCycle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCycle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


