/*
Tinybeans API - Unofficial

Reverse Engineered API for Tinybeans.  This is horribly incomplete, and not supported

API version: 0.0.1
Contact: dave@mudsite.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tinybeans

import (
	"encoding/json"
)

// Features struct for Features
type Features struct {
	URL *string `json:"URL,omitempty"`
	Id *float32 `json:"id,omitempty"`
	DateCreated *string `json:"dateCreated,omitempty"`
	LastUpdated *string `json:"lastUpdated,omitempty"`
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	ScopeMap *string `json:"scopeMap,omitempty"`
}

// NewFeatures instantiates a new Features object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeatures() *Features {
	this := Features{}
	return &this
}

// NewFeaturesWithDefaults instantiates a new Features object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeaturesWithDefaults() *Features {
	this := Features{}
	return &this
}

// GetURL returns the URL field value if set, zero value otherwise.
func (o *Features) GetURL() string {
	if o == nil || o.URL == nil {
		var ret string
		return ret
	}
	return *o.URL
}

// GetURLOk returns a tuple with the URL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Features) GetURLOk() (*string, bool) {
	if o == nil || o.URL == nil {
		return nil, false
	}
	return o.URL, true
}

// HasURL returns a boolean if a field has been set.
func (o *Features) HasURL() bool {
	if o != nil && o.URL != nil {
		return true
	}

	return false
}

// SetURL gets a reference to the given string and assigns it to the URL field.
func (o *Features) SetURL(v string) {
	o.URL = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Features) GetId() float32 {
	if o == nil || o.Id == nil {
		var ret float32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Features) GetIdOk() (*float32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Features) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given float32 and assigns it to the Id field.
func (o *Features) SetId(v float32) {
	o.Id = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *Features) GetDateCreated() string {
	if o == nil || o.DateCreated == nil {
		var ret string
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Features) GetDateCreatedOk() (*string, bool) {
	if o == nil || o.DateCreated == nil {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *Features) HasDateCreated() bool {
	if o != nil && o.DateCreated != nil {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given string and assigns it to the DateCreated field.
func (o *Features) SetDateCreated(v string) {
	o.DateCreated = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *Features) GetLastUpdated() string {
	if o == nil || o.LastUpdated == nil {
		var ret string
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Features) GetLastUpdatedOk() (*string, bool) {
	if o == nil || o.LastUpdated == nil {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *Features) HasLastUpdated() bool {
	if o != nil && o.LastUpdated != nil {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given string and assigns it to the LastUpdated field.
func (o *Features) SetLastUpdated(v string) {
	o.LastUpdated = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Features) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Features) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Features) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Features) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Features) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Features) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Features) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Features) SetDescription(v string) {
	o.Description = &v
}

// GetScopeMap returns the ScopeMap field value if set, zero value otherwise.
func (o *Features) GetScopeMap() string {
	if o == nil || o.ScopeMap == nil {
		var ret string
		return ret
	}
	return *o.ScopeMap
}

// GetScopeMapOk returns a tuple with the ScopeMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Features) GetScopeMapOk() (*string, bool) {
	if o == nil || o.ScopeMap == nil {
		return nil, false
	}
	return o.ScopeMap, true
}

// HasScopeMap returns a boolean if a field has been set.
func (o *Features) HasScopeMap() bool {
	if o != nil && o.ScopeMap != nil {
		return true
	}

	return false
}

// SetScopeMap gets a reference to the given string and assigns it to the ScopeMap field.
func (o *Features) SetScopeMap(v string) {
	o.ScopeMap = &v
}

func (o Features) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.URL != nil {
		toSerialize["URL"] = o.URL
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.DateCreated != nil {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if o.LastUpdated != nil {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.ScopeMap != nil {
		toSerialize["scopeMap"] = o.ScopeMap
	}
	return json.Marshal(toSerialize)
}

type NullableFeatures struct {
	value *Features
	isSet bool
}

func (v NullableFeatures) Get() *Features {
	return v.value
}

func (v *NullableFeatures) Set(val *Features) {
	v.value = val
	v.isSet = true
}

func (v NullableFeatures) IsSet() bool {
	return v.isSet
}

func (v *NullableFeatures) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeatures(val *Features) *NullableFeatures {
	return &NullableFeatures{value: val, isSet: true}
}

func (v NullableFeatures) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeatures) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


