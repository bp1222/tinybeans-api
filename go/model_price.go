/*
Tinybeans API - Unofficial

Reverse Engineered API for Tinybeans.  This is horribly incomplete, and not supported

API version: 0.0.1
Contact: dave@mudsite.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tinybeans

import (
	"encoding/json"
)

// Price struct for Price
type Price struct {
	URL *string `json:"URL,omitempty"`
	Id *int64 `json:"id,omitempty"`
	DateCreated *string `json:"dateCreated,omitempty"`
	AmountInCents *int64 `json:"amountInCents,omitempty"`
	AmountInDollarsAndCents *float32 `json:"amountInDollarsAndCents,omitempty"`
	TaxAsPercentage *float32 `json:"taxAsPercentage,omitempty"`
	TaxAmountInCents *int64 `json:"taxAmountInCents,omitempty"`
	LocaleTag *string `json:"localeTag,omitempty"`
}

// NewPrice instantiates a new Price object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrice() *Price {
	this := Price{}
	return &this
}

// NewPriceWithDefaults instantiates a new Price object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPriceWithDefaults() *Price {
	this := Price{}
	return &this
}

// GetURL returns the URL field value if set, zero value otherwise.
func (o *Price) GetURL() string {
	if o == nil || o.URL == nil {
		var ret string
		return ret
	}
	return *o.URL
}

// GetURLOk returns a tuple with the URL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Price) GetURLOk() (*string, bool) {
	if o == nil || o.URL == nil {
		return nil, false
	}
	return o.URL, true
}

// HasURL returns a boolean if a field has been set.
func (o *Price) HasURL() bool {
	if o != nil && o.URL != nil {
		return true
	}

	return false
}

// SetURL gets a reference to the given string and assigns it to the URL field.
func (o *Price) SetURL(v string) {
	o.URL = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Price) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Price) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Price) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Price) SetId(v int64) {
	o.Id = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *Price) GetDateCreated() string {
	if o == nil || o.DateCreated == nil {
		var ret string
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Price) GetDateCreatedOk() (*string, bool) {
	if o == nil || o.DateCreated == nil {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *Price) HasDateCreated() bool {
	if o != nil && o.DateCreated != nil {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given string and assigns it to the DateCreated field.
func (o *Price) SetDateCreated(v string) {
	o.DateCreated = &v
}

// GetAmountInCents returns the AmountInCents field value if set, zero value otherwise.
func (o *Price) GetAmountInCents() int64 {
	if o == nil || o.AmountInCents == nil {
		var ret int64
		return ret
	}
	return *o.AmountInCents
}

// GetAmountInCentsOk returns a tuple with the AmountInCents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Price) GetAmountInCentsOk() (*int64, bool) {
	if o == nil || o.AmountInCents == nil {
		return nil, false
	}
	return o.AmountInCents, true
}

// HasAmountInCents returns a boolean if a field has been set.
func (o *Price) HasAmountInCents() bool {
	if o != nil && o.AmountInCents != nil {
		return true
	}

	return false
}

// SetAmountInCents gets a reference to the given int64 and assigns it to the AmountInCents field.
func (o *Price) SetAmountInCents(v int64) {
	o.AmountInCents = &v
}

// GetAmountInDollarsAndCents returns the AmountInDollarsAndCents field value if set, zero value otherwise.
func (o *Price) GetAmountInDollarsAndCents() float32 {
	if o == nil || o.AmountInDollarsAndCents == nil {
		var ret float32
		return ret
	}
	return *o.AmountInDollarsAndCents
}

// GetAmountInDollarsAndCentsOk returns a tuple with the AmountInDollarsAndCents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Price) GetAmountInDollarsAndCentsOk() (*float32, bool) {
	if o == nil || o.AmountInDollarsAndCents == nil {
		return nil, false
	}
	return o.AmountInDollarsAndCents, true
}

// HasAmountInDollarsAndCents returns a boolean if a field has been set.
func (o *Price) HasAmountInDollarsAndCents() bool {
	if o != nil && o.AmountInDollarsAndCents != nil {
		return true
	}

	return false
}

// SetAmountInDollarsAndCents gets a reference to the given float32 and assigns it to the AmountInDollarsAndCents field.
func (o *Price) SetAmountInDollarsAndCents(v float32) {
	o.AmountInDollarsAndCents = &v
}

// GetTaxAsPercentage returns the TaxAsPercentage field value if set, zero value otherwise.
func (o *Price) GetTaxAsPercentage() float32 {
	if o == nil || o.TaxAsPercentage == nil {
		var ret float32
		return ret
	}
	return *o.TaxAsPercentage
}

// GetTaxAsPercentageOk returns a tuple with the TaxAsPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Price) GetTaxAsPercentageOk() (*float32, bool) {
	if o == nil || o.TaxAsPercentage == nil {
		return nil, false
	}
	return o.TaxAsPercentage, true
}

// HasTaxAsPercentage returns a boolean if a field has been set.
func (o *Price) HasTaxAsPercentage() bool {
	if o != nil && o.TaxAsPercentage != nil {
		return true
	}

	return false
}

// SetTaxAsPercentage gets a reference to the given float32 and assigns it to the TaxAsPercentage field.
func (o *Price) SetTaxAsPercentage(v float32) {
	o.TaxAsPercentage = &v
}

// GetTaxAmountInCents returns the TaxAmountInCents field value if set, zero value otherwise.
func (o *Price) GetTaxAmountInCents() int64 {
	if o == nil || o.TaxAmountInCents == nil {
		var ret int64
		return ret
	}
	return *o.TaxAmountInCents
}

// GetTaxAmountInCentsOk returns a tuple with the TaxAmountInCents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Price) GetTaxAmountInCentsOk() (*int64, bool) {
	if o == nil || o.TaxAmountInCents == nil {
		return nil, false
	}
	return o.TaxAmountInCents, true
}

// HasTaxAmountInCents returns a boolean if a field has been set.
func (o *Price) HasTaxAmountInCents() bool {
	if o != nil && o.TaxAmountInCents != nil {
		return true
	}

	return false
}

// SetTaxAmountInCents gets a reference to the given int64 and assigns it to the TaxAmountInCents field.
func (o *Price) SetTaxAmountInCents(v int64) {
	o.TaxAmountInCents = &v
}

// GetLocaleTag returns the LocaleTag field value if set, zero value otherwise.
func (o *Price) GetLocaleTag() string {
	if o == nil || o.LocaleTag == nil {
		var ret string
		return ret
	}
	return *o.LocaleTag
}

// GetLocaleTagOk returns a tuple with the LocaleTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Price) GetLocaleTagOk() (*string, bool) {
	if o == nil || o.LocaleTag == nil {
		return nil, false
	}
	return o.LocaleTag, true
}

// HasLocaleTag returns a boolean if a field has been set.
func (o *Price) HasLocaleTag() bool {
	if o != nil && o.LocaleTag != nil {
		return true
	}

	return false
}

// SetLocaleTag gets a reference to the given string and assigns it to the LocaleTag field.
func (o *Price) SetLocaleTag(v string) {
	o.LocaleTag = &v
}

func (o Price) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.URL != nil {
		toSerialize["URL"] = o.URL
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.DateCreated != nil {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if o.AmountInCents != nil {
		toSerialize["amountInCents"] = o.AmountInCents
	}
	if o.AmountInDollarsAndCents != nil {
		toSerialize["amountInDollarsAndCents"] = o.AmountInDollarsAndCents
	}
	if o.TaxAsPercentage != nil {
		toSerialize["taxAsPercentage"] = o.TaxAsPercentage
	}
	if o.TaxAmountInCents != nil {
		toSerialize["taxAmountInCents"] = o.TaxAmountInCents
	}
	if o.LocaleTag != nil {
		toSerialize["localeTag"] = o.LocaleTag
	}
	return json.Marshal(toSerialize)
}

type NullablePrice struct {
	value *Price
	isSet bool
}

func (v NullablePrice) Get() *Price {
	return v.value
}

func (v *NullablePrice) Set(val *Price) {
	v.value = val
	v.isSet = true
}

func (v NullablePrice) IsSet() bool {
	return v.isSet
}

func (v *NullablePrice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrice(val *Price) *NullablePrice {
	return &NullablePrice{value: val, isSet: true}
}

func (v NullablePrice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


